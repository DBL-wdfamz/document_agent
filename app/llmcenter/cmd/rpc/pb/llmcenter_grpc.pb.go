// 指定使用 proto3 语法。

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: llmcenter.proto

// 定义包名，这有助于防止不同 .proto 文件之间的命名冲突。

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LlmCenter_ChatCompletions_FullMethodName       = "/llmcenter.LlmCenter/ChatCompletions"
	LlmCenter_ChatResume_FullMethodName            = "/llmcenter.LlmCenter/ChatResume"
	LlmCenter_FileUpload_FullMethodName            = "/llmcenter.LlmCenter/FileUpload"
	LlmCenter_GetConversations_FullMethodName      = "/llmcenter.LlmCenter/GetConversations"
	LlmCenter_GetConversationDetail_FullMethodName = "/llmcenter.LlmCenter/GetConversationDetail"
	LlmCenter_GetDocumentDetail_FullMethodName     = "/llmcenter.LlmCenter/GetDocumentDetail"
	LlmCenter_GetHistoryData_FullMethodName        = "/llmcenter.LlmCenter/GetHistoryData"
	LlmCenter_EditDocument_FullMethodName          = "/llmcenter.LlmCenter/EditDocument"
)

// LlmCenterClient is the client API for LlmCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LlmCenterClient interface {
	// RPC 方法: ChatCompletions
	// 对应 API: POST /llmcenter/v1/chat/completions
	// 功能: 发起新对话或在现有对话中发送消息，以流式方式返回响应。
	ChatCompletions(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatCompletionsResponse], error)
	// RPC 方法: ChatResume
	// 对应 API: POST /llmcenter/v1/chat/resume
	// 功能: 在工作流中断后，继续生成内容，以流式方式返回最终文档。
	ChatResume(ctx context.Context, in *ChatResumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResumeResponse], error)
	// RPC 方法: FileUpload
	// 对应 API: POST /llmcenter/v1/files/upload
	// 功能: 使用客户端流上传文件。客户端先发送文件元信息，然后分块发送文件数据。
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse], error)
	// RPC 方法: GetConversations
	// 对应 API: GET /llmcenter/v1/conversations
	// 功能: 获取当前用户的会话列表。
	GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error)
	// RPC 方法: GetConversationDetail
	// 对应 API: GET /llmcenter/v1/conversations/{conversation_id}
	// 功能: 获取指定会话的详细历史消息。
	GetConversationDetail(ctx context.Context, in *GetConversationDetailRequest, opts ...grpc.CallOption) (*GetConversationDetailResponse, error)
	// RPC 方法: GetDocumentDetail
	// 对应 API: GET /llmcenter/v1/documents/{conversation_id}
	// 功能: 获取指定会话的最终文档历史记录。
	GetDocumentDetail(ctx context.Context, in *GetDocumentDetailRequest, opts ...grpc.CallOption) (*GetDocumentDetailResponse, error)
	// RPC 方法: GetHistoryData
	// 对应 API: GET /llmcenter/v1/historydatas/{conversation_id}
	// 功能: 获取指定会话的历史数据
	GetHistoryData(ctx context.Context, in *GetHistoryDataRequest, opts ...grpc.CallOption) (*GetHistoryDataResponse, error)
	// RPC 方法: EditDocumentRequest
	// 对应 API: POST /llmcenter/v1/chat/edit
	// 功能: 获取指定会话的历史数据
	EditDocument(ctx context.Context, in *EditDocumentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EditDocumentResponse], error)
}

type llmCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewLlmCenterClient(cc grpc.ClientConnInterface) LlmCenterClient {
	return &llmCenterClient{cc}
}

func (c *llmCenterClient) ChatCompletions(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatCompletionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LlmCenter_ServiceDesc.Streams[0], LlmCenter_ChatCompletions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatCompletionsRequest, ChatCompletionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_ChatCompletionsClient = grpc.ServerStreamingClient[ChatCompletionsResponse]

func (c *llmCenterClient) ChatResume(ctx context.Context, in *ChatResumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResumeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LlmCenter_ServiceDesc.Streams[1], LlmCenter_ChatResume_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatResumeRequest, ChatResumeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_ChatResumeClient = grpc.ServerStreamingClient[ChatResumeResponse]

func (c *llmCenterClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LlmCenter_ServiceDesc.Streams[2], LlmCenter_FileUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileUploadRequest, FileUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_FileUploadClient = grpc.ClientStreamingClient[FileUploadRequest, FileUploadResponse]

func (c *llmCenterClient) GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationsResponse)
	err := c.cc.Invoke(ctx, LlmCenter_GetConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmCenterClient) GetConversationDetail(ctx context.Context, in *GetConversationDetailRequest, opts ...grpc.CallOption) (*GetConversationDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationDetailResponse)
	err := c.cc.Invoke(ctx, LlmCenter_GetConversationDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmCenterClient) GetDocumentDetail(ctx context.Context, in *GetDocumentDetailRequest, opts ...grpc.CallOption) (*GetDocumentDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentDetailResponse)
	err := c.cc.Invoke(ctx, LlmCenter_GetDocumentDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmCenterClient) GetHistoryData(ctx context.Context, in *GetHistoryDataRequest, opts ...grpc.CallOption) (*GetHistoryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryDataResponse)
	err := c.cc.Invoke(ctx, LlmCenter_GetHistoryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmCenterClient) EditDocument(ctx context.Context, in *EditDocumentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EditDocumentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LlmCenter_ServiceDesc.Streams[3], LlmCenter_EditDocument_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EditDocumentRequest, EditDocumentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_EditDocumentClient = grpc.ServerStreamingClient[EditDocumentResponse]

// LlmCenterServer is the server API for LlmCenter service.
// All implementations must embed UnimplementedLlmCenterServer
// for forward compatibility.
type LlmCenterServer interface {
	// RPC 方法: ChatCompletions
	// 对应 API: POST /llmcenter/v1/chat/completions
	// 功能: 发起新对话或在现有对话中发送消息，以流式方式返回响应。
	ChatCompletions(*ChatCompletionsRequest, grpc.ServerStreamingServer[ChatCompletionsResponse]) error
	// RPC 方法: ChatResume
	// 对应 API: POST /llmcenter/v1/chat/resume
	// 功能: 在工作流中断后，继续生成内容，以流式方式返回最终文档。
	ChatResume(*ChatResumeRequest, grpc.ServerStreamingServer[ChatResumeResponse]) error
	// RPC 方法: FileUpload
	// 对应 API: POST /llmcenter/v1/files/upload
	// 功能: 使用客户端流上传文件。客户端先发送文件元信息，然后分块发送文件数据。
	FileUpload(grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]) error
	// RPC 方法: GetConversations
	// 对应 API: GET /llmcenter/v1/conversations
	// 功能: 获取当前用户的会话列表。
	GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error)
	// RPC 方法: GetConversationDetail
	// 对应 API: GET /llmcenter/v1/conversations/{conversation_id}
	// 功能: 获取指定会话的详细历史消息。
	GetConversationDetail(context.Context, *GetConversationDetailRequest) (*GetConversationDetailResponse, error)
	// RPC 方法: GetDocumentDetail
	// 对应 API: GET /llmcenter/v1/documents/{conversation_id}
	// 功能: 获取指定会话的最终文档历史记录。
	GetDocumentDetail(context.Context, *GetDocumentDetailRequest) (*GetDocumentDetailResponse, error)
	// RPC 方法: GetHistoryData
	// 对应 API: GET /llmcenter/v1/historydatas/{conversation_id}
	// 功能: 获取指定会话的历史数据
	GetHistoryData(context.Context, *GetHistoryDataRequest) (*GetHistoryDataResponse, error)
	// RPC 方法: EditDocumentRequest
	// 对应 API: POST /llmcenter/v1/chat/edit
	// 功能: 获取指定会话的历史数据
	EditDocument(*EditDocumentRequest, grpc.ServerStreamingServer[EditDocumentResponse]) error
	mustEmbedUnimplementedLlmCenterServer()
}

// UnimplementedLlmCenterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLlmCenterServer struct{}

func (UnimplementedLlmCenterServer) ChatCompletions(*ChatCompletionsRequest, grpc.ServerStreamingServer[ChatCompletionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletions not implemented")
}
func (UnimplementedLlmCenterServer) ChatResume(*ChatResumeRequest, grpc.ServerStreamingServer[ChatResumeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ChatResume not implemented")
}
func (UnimplementedLlmCenterServer) FileUpload(grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedLlmCenterServer) GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}
func (UnimplementedLlmCenterServer) GetConversationDetail(context.Context, *GetConversationDetailRequest) (*GetConversationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationDetail not implemented")
}
func (UnimplementedLlmCenterServer) GetDocumentDetail(context.Context, *GetDocumentDetailRequest) (*GetDocumentDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentDetail not implemented")
}
func (UnimplementedLlmCenterServer) GetHistoryData(context.Context, *GetHistoryDataRequest) (*GetHistoryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryData not implemented")
}
func (UnimplementedLlmCenterServer) EditDocument(*EditDocumentRequest, grpc.ServerStreamingServer[EditDocumentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EditDocument not implemented")
}
func (UnimplementedLlmCenterServer) mustEmbedUnimplementedLlmCenterServer() {}
func (UnimplementedLlmCenterServer) testEmbeddedByValue()                   {}

// UnsafeLlmCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LlmCenterServer will
// result in compilation errors.
type UnsafeLlmCenterServer interface {
	mustEmbedUnimplementedLlmCenterServer()
}

func RegisterLlmCenterServer(s grpc.ServiceRegistrar, srv LlmCenterServer) {
	// If the following call pancis, it indicates UnimplementedLlmCenterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LlmCenter_ServiceDesc, srv)
}

func _LlmCenter_ChatCompletions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LlmCenterServer).ChatCompletions(m, &grpc.GenericServerStream[ChatCompletionsRequest, ChatCompletionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_ChatCompletionsServer = grpc.ServerStreamingServer[ChatCompletionsResponse]

func _LlmCenter_ChatResume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatResumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LlmCenterServer).ChatResume(m, &grpc.GenericServerStream[ChatResumeRequest, ChatResumeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_ChatResumeServer = grpc.ServerStreamingServer[ChatResumeResponse]

func _LlmCenter_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LlmCenterServer).FileUpload(&grpc.GenericServerStream[FileUploadRequest, FileUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_FileUploadServer = grpc.ClientStreamingServer[FileUploadRequest, FileUploadResponse]

func _LlmCenter_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmCenterServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmCenter_GetConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmCenterServer).GetConversations(ctx, req.(*GetConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmCenter_GetConversationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmCenterServer).GetConversationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmCenter_GetConversationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmCenterServer).GetConversationDetail(ctx, req.(*GetConversationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmCenter_GetDocumentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmCenterServer).GetDocumentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmCenter_GetDocumentDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmCenterServer).GetDocumentDetail(ctx, req.(*GetDocumentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmCenter_GetHistoryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmCenterServer).GetHistoryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LlmCenter_GetHistoryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmCenterServer).GetHistoryData(ctx, req.(*GetHistoryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LlmCenter_EditDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EditDocumentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LlmCenterServer).EditDocument(m, &grpc.GenericServerStream[EditDocumentRequest, EditDocumentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlmCenter_EditDocumentServer = grpc.ServerStreamingServer[EditDocumentResponse]

// LlmCenter_ServiceDesc is the grpc.ServiceDesc for LlmCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LlmCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmcenter.LlmCenter",
	HandlerType: (*LlmCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConversations",
			Handler:    _LlmCenter_GetConversations_Handler,
		},
		{
			MethodName: "GetConversationDetail",
			Handler:    _LlmCenter_GetConversationDetail_Handler,
		},
		{
			MethodName: "GetDocumentDetail",
			Handler:    _LlmCenter_GetDocumentDetail_Handler,
		},
		{
			MethodName: "GetHistoryData",
			Handler:    _LlmCenter_GetHistoryData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletions",
			Handler:       _LlmCenter_ChatCompletions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChatResume",
			Handler:       _LlmCenter_ChatResume_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FileUpload",
			Handler:       _LlmCenter_FileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EditDocument",
			Handler:       _LlmCenter_EditDocument_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "llmcenter.proto",
}
