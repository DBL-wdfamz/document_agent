// 指定使用 proto3 语法。

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.4
// source: llmcenter.proto

// 定义包名，这有助于防止不同 .proto 文件之间的命名冲突。

package pb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 请求: 发起新对话或继续对话
type ChatCompletionsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           int64                  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id"`                                 //api层传来的用户id
	ConversationId   string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id"`          // 可选: 现有会话ID。如果为空，将创建新会话。
	Prompt           string                 `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt"`                                                // 必选: 用户输入的文本内容。
	UseKnowledgeBase bool                   `protobuf:"varint,3,opt,name=use_knowledge_base,json=useKnowledgeBase,proto3" json:"use_knowledge_base"` // 可选: 是否使用自定义知识库。
	KnowledgeBaseId  string                 `protobuf:"bytes,4,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id"`     // 可选: 如果 use_knowledge_base 为 true，则需要提供知识库ID。
	References       []*Reference           `protobuf:"bytes,5,rep,name=references,proto3" json:"references"`                                        // 可选: 引用列表，例如引用的文件。
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ChatCompletionsRequest) Reset() {
	*x = ChatCompletionsRequest{}
	mi := &file_llmcenter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionsRequest) ProtoMessage() {}

func (x *ChatCompletionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionsRequest.ProtoReflect.Descriptor instead.
func (*ChatCompletionsRequest) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{0}
}

func (x *ChatCompletionsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatCompletionsRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ChatCompletionsRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ChatCompletionsRequest) GetUseKnowledgeBase() bool {
	if x != nil {
		return x.UseKnowledgeBase
	}
	return false
}

func (x *ChatCompletionsRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *ChatCompletionsRequest) GetReferences() []*Reference {
	if x != nil {
		return x.References
	}
	return nil
}

// 响应流: ChatCompletions 的流式响应体
// 使用 oneof 来模拟 SSE 中的不同 event 类型。
type ChatCompletionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ChatCompletionsResponse_Message
	//	*ChatCompletionsResponse_Interrupt
	//	*ChatCompletionsResponse_End
	Event         isChatCompletionsResponse_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatCompletionsResponse) Reset() {
	*x = ChatCompletionsResponse{}
	mi := &file_llmcenter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionsResponse) ProtoMessage() {}

func (x *ChatCompletionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionsResponse.ProtoReflect.Descriptor instead.
func (*ChatCompletionsResponse) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{1}
}

func (x *ChatCompletionsResponse) GetEvent() isChatCompletionsResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ChatCompletionsResponse) GetMessage() *SSEMessageEvent {
	if x != nil {
		if x, ok := x.Event.(*ChatCompletionsResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *ChatCompletionsResponse) GetInterrupt() *SSEInterruptEvent {
	if x != nil {
		if x, ok := x.Event.(*ChatCompletionsResponse_Interrupt); ok {
			return x.Interrupt
		}
	}
	return nil
}

func (x *ChatCompletionsResponse) GetEnd() *SSEEndEvent {
	if x != nil {
		if x, ok := x.Event.(*ChatCompletionsResponse_End); ok {
			return x.End
		}
	}
	return nil
}

type isChatCompletionsResponse_Event interface {
	isChatCompletionsResponse_Event()
}

type ChatCompletionsResponse_Message struct {
	Message *SSEMessageEvent `protobuf:"bytes,1,opt,name=message,proto3,oneof"` // 对应 event: message
}

type ChatCompletionsResponse_Interrupt struct {
	Interrupt *SSEInterruptEvent `protobuf:"bytes,2,opt,name=interrupt,proto3,oneof"` // 对应 event: interrupt
}

type ChatCompletionsResponse_End struct {
	End *SSEEndEvent `protobuf:"bytes,3,opt,name=end,proto3,oneof"` // 对应 event: end
}

func (*ChatCompletionsResponse_Message) isChatCompletionsResponse_Event() {}

func (*ChatCompletionsResponse_Interrupt) isChatCompletionsResponse_Event() {}

func (*ChatCompletionsResponse_End) isChatCompletionsResponse_Event() {}

// 请求: 在中断后继续流程
type ChatResumeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         int64                  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id"`                        //api层传来的用户id
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id"` // 必选: 当前会话的ID。
	Content        string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`                                     // 必选: 用户在前端编辑器中确认后的完整内容。
	TemplateId     string                 `protobuf:"bytes,3,opt,name=template_id,json=templateId,proto3" json:"template_id"`             // 可选: 如果用户在这一步选择了模板。
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChatResumeRequest) Reset() {
	*x = ChatResumeRequest{}
	mi := &file_llmcenter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResumeRequest) ProtoMessage() {}

func (x *ChatResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResumeRequest.ProtoReflect.Descriptor instead.
func (*ChatResumeRequest) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{2}
}

func (x *ChatResumeRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChatResumeRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ChatResumeRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatResumeRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

// 响应流: ChatResume 的流式响应体
type ChatResumeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ChatResumeResponse_Message
	//	*ChatResumeResponse_End
	Event         isChatResumeResponse_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatResumeResponse) Reset() {
	*x = ChatResumeResponse{}
	mi := &file_llmcenter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResumeResponse) ProtoMessage() {}

func (x *ChatResumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResumeResponse.ProtoReflect.Descriptor instead.
func (*ChatResumeResponse) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{3}
}

func (x *ChatResumeResponse) GetEvent() isChatResumeResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ChatResumeResponse) GetMessage() *SSEMessageEvent {
	if x != nil {
		if x, ok := x.Event.(*ChatResumeResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *ChatResumeResponse) GetEnd() *SSEEndEvent {
	if x != nil {
		if x, ok := x.Event.(*ChatResumeResponse_End); ok {
			return x.End
		}
	}
	return nil
}

type isChatResumeResponse_Event interface {
	isChatResumeResponse_Event()
}

type ChatResumeResponse_Message struct {
	Message *SSEMessageEvent `protobuf:"bytes,1,opt,name=message,proto3,oneof"` // 对应 event: message
}

type ChatResumeResponse_End struct {
	End *SSEEndEvent `protobuf:"bytes,2,opt,name=end,proto3,oneof"` // 对应 event: end
}

func (*ChatResumeResponse_Message) isChatResumeResponse_Event() {}

func (*ChatResumeResponse_End) isChatResumeResponse_Event() {}

// 请求: 获取用户所有会话列表
// 通常 user_id 从 gRPC 的 metadata (类似 HTTP Header) 中获取，所以请求体为空。
type GetConversationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id"` // 可以选择在这里传递 user_id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationsRequest) Reset() {
	*x = GetConversationsRequest{}
	mi := &file_llmcenter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsRequest) ProtoMessage() {}

func (x *GetConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsRequest.ProtoReflect.Descriptor instead.
func (*GetConversationsRequest) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{4}
}

func (x *GetConversationsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 响应: 会话列表
type GetConversationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*Conversation        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationsResponse) Reset() {
	*x = GetConversationsResponse{}
	mi := &file_llmcenter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsResponse) ProtoMessage() {}

func (x *GetConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsResponse.ProtoReflect.Descriptor instead.
func (*GetConversationsResponse) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{5}
}

func (x *GetConversationsResponse) GetData() []*Conversation {
	if x != nil {
		return x.Data
	}
	return nil
}

// 请求: 获取单个会话的详细信息
type GetConversationDetailRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 从路径中获取的会话ID
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetConversationDetailRequest) Reset() {
	*x = GetConversationDetailRequest{}
	mi := &file_llmcenter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationDetailRequest) ProtoMessage() {}

func (x *GetConversationDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationDetailRequest.ProtoReflect.Descriptor instead.
func (*GetConversationDetailRequest) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{6}
}

func (x *GetConversationDetailRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

// 响应: 单个会话的详细信息
type GetConversationDetailResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	History        []*Message             `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetConversationDetailResponse) Reset() {
	*x = GetConversationDetailResponse{}
	mi := &file_llmcenter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationDetailResponse) ProtoMessage() {}

func (x *GetConversationDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationDetailResponse.ProtoReflect.Descriptor instead.
func (*GetConversationDetailResponse) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{7}
}

func (x *GetConversationDetailResponse) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetConversationDetailResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetConversationDetailResponse) GetHistory() []*Message {
	if x != nil {
		return x.History
	}
	return nil
}

// 请求流: 文件上传
// 客户端流的第一个消息必须是 FileInfo，后续消息为文件数据块。
type FileUploadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*FileUploadRequest_Info
	//	*FileUploadRequest_Chunk
	Data          isFileUploadRequest_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadRequest) Reset() {
	*x = FileUploadRequest{}
	mi := &file_llmcenter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadRequest) ProtoMessage() {}

func (x *FileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadRequest.ProtoReflect.Descriptor instead.
func (*FileUploadRequest) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{8}
}

func (x *FileUploadRequest) GetData() isFileUploadRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileUploadRequest) GetInfo() *FileInfo {
	if x != nil {
		if x, ok := x.Data.(*FileUploadRequest_Info); ok {
			return x.Info
		}
	}
	return nil
}

func (x *FileUploadRequest) GetChunk() []byte {
	if x != nil {
		if x, ok := x.Data.(*FileUploadRequest_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isFileUploadRequest_Data interface {
	isFileUploadRequest_Data()
}

type FileUploadRequest_Info struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"` // 文件元信息
}

type FileUploadRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"` // 文件数据块
}

func (*FileUploadRequest_Info) isFileUploadRequest_Data() {}

func (*FileUploadRequest_Chunk) isFileUploadRequest_Data() {}

// 消息: 文件元信息
type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"` // 原始文件名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_llmcenter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{9}
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// 响应: 文件上传成功
type FileUploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`       // 后端生成的唯一文件ID
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"` // 原始文件名
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                           // 文件的可访问URL
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`                   // 成功消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUploadResponse) Reset() {
	*x = FileUploadResponse{}
	mi := &file_llmcenter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadResponse) ProtoMessage() {}

func (x *FileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadResponse.ProtoReflect.Descriptor instead.
func (*FileUploadResponse) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{10}
}

func (x *FileUploadResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileUploadResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileUploadResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 结构: 对话中引用的对象
type Reference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                   // 引用类型, 例如: "file"
	FileId        string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"` // 文件ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reference) Reset() {
	*x = Reference{}
	mi := &file_llmcenter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{11}
}

func (x *Reference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Reference) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// 结构: 会话列表中的单个会话
type Conversation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 会话ID
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                         // 会话标题
	UpdatedAt      string                 `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                // 更新时间 (RFC3339 格式的字符串)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_llmcenter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{12}
}

func (x *Conversation) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *Conversation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Conversation) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 结构: 单条历史消息
type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                      // 消息ID
	Role          string                 `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`                                  // 角色: "user" 或 "assistant"
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                            // 消息内容
	ContentType   string                 `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // 内容类型, 例如: "text", "document_outline"
	CreatedAt     string                 `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`       // 创建时间 (RFC3339 格式的字符串)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_llmcenter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{13}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Message) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// 事件: message
// 用于闲聊或最终文档生成的流式文本
type SSEMessageEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         string                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"` // 流式返回的文本片段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SSEMessageEvent) Reset() {
	*x = SSEMessageEvent{}
	mi := &file_llmcenter_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSEMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSEMessageEvent) ProtoMessage() {}

func (x *SSEMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSEMessageEvent.ProtoReflect.Descriptor instead.
func (*SSEMessageEvent) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{14}
}

func (x *SSEMessageEvent) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

// 事件: interrupt
// 用于触发文档生成，返回内容清单
type SSEInterruptEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	MessageId      string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ContentType    string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // 内容类型, 例如 "document_outline"
	Content        string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                            // 需要填入编辑器的内容清单
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SSEInterruptEvent) Reset() {
	*x = SSEInterruptEvent{}
	mi := &file_llmcenter_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSEInterruptEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSEInterruptEvent) ProtoMessage() {}

func (x *SSEInterruptEvent) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSEInterruptEvent.ProtoReflect.Descriptor instead.
func (*SSEInterruptEvent) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{15}
}

func (x *SSEInterruptEvent) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SSEInterruptEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SSEInterruptEvent) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *SSEInterruptEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 事件: end
// 表示一次完整的对话或流结束
type SSEEndEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId string                 `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 本次交互所属的会话ID
	MessageId      string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                // 本次交互最终生成的完整消息ID
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SSEEndEvent) Reset() {
	*x = SSEEndEvent{}
	mi := &file_llmcenter_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSEEndEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSEEndEvent) ProtoMessage() {}

func (x *SSEEndEvent) ProtoReflect() protoreflect.Message {
	mi := &file_llmcenter_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSEEndEvent.ProtoReflect.Descriptor instead.
func (*SSEEndEvent) Descriptor() ([]byte, []int) {
	return file_llmcenter_proto_rawDescGZIP(), []int{16}
}

func (x *SSEEndEvent) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SSEEndEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

var File_llmcenter_proto protoreflect.FileDescriptor

const file_llmcenter_proto_rawDesc = "" +
	"\n" +
	"\x0fllmcenter.proto\x12\tllmcenter\"\x82\x02\n" +
	"\x16ChatCompletionsRequest\x12\x17\n" +
	"\auser_id\x18\x06 \x01(\x03R\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12\x16\n" +
	"\x06prompt\x18\x02 \x01(\tR\x06prompt\x12,\n" +
	"\x12use_knowledge_base\x18\x03 \x01(\bR\x10useKnowledgeBase\x12*\n" +
	"\x11knowledge_base_id\x18\x04 \x01(\tR\x0fknowledgeBaseId\x124\n" +
	"\n" +
	"references\x18\x05 \x03(\v2\x14.llmcenter.ReferenceR\n" +
	"references\"\xc4\x01\n" +
	"\x17ChatCompletionsResponse\x126\n" +
	"\amessage\x18\x01 \x01(\v2\x1a.llmcenter.SSEMessageEventH\x00R\amessage\x12<\n" +
	"\tinterrupt\x18\x02 \x01(\v2\x1c.llmcenter.SSEInterruptEventH\x00R\tinterrupt\x12*\n" +
	"\x03end\x18\x03 \x01(\v2\x16.llmcenter.SSEEndEventH\x00R\x03endB\a\n" +
	"\x05event\"\x90\x01\n" +
	"\x11ChatResumeRequest\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\x03R\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x1f\n" +
	"\vtemplate_id\x18\x03 \x01(\tR\n" +
	"templateId\"\x81\x01\n" +
	"\x12ChatResumeResponse\x126\n" +
	"\amessage\x18\x01 \x01(\v2\x1a.llmcenter.SSEMessageEventH\x00R\amessage\x12*\n" +
	"\x03end\x18\x02 \x01(\v2\x16.llmcenter.SSEEndEventH\x00R\x03endB\a\n" +
	"\x05event\"2\n" +
	"\x17GetConversationsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"G\n" +
	"\x18GetConversationsResponse\x12+\n" +
	"\x04data\x18\x01 \x03(\v2\x17.llmcenter.ConversationR\x04data\"G\n" +
	"\x1cGetConversationDetailRequest\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\"\x8c\x01\n" +
	"\x1dGetConversationDetailResponse\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12,\n" +
	"\ahistory\x18\x03 \x03(\v2\x12.llmcenter.MessageR\ahistory\"^\n" +
	"\x11FileUploadRequest\x12)\n" +
	"\x04info\x18\x01 \x01(\v2\x13.llmcenter.FileInfoH\x00R\x04info\x12\x16\n" +
	"\x05chunk\x18\x02 \x01(\fH\x00R\x05chunkB\x06\n" +
	"\x04data\"'\n" +
	"\bFileInfo\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\"v\n" +
	"\x12FileUploadResponse\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"8\n" +
	"\tReference\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\"l\n" +
	"\fConversation\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\tR\tupdatedAt\"\x89\x01\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04role\x18\x02 \x01(\tR\x04role\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12!\n" +
	"\fcontent_type\x18\x04 \x01(\tR\vcontentType\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\tR\tcreatedAt\"'\n" +
	"\x0fSSEMessageEvent\x12\x14\n" +
	"\x05chunk\x18\x01 \x01(\tR\x05chunk\"\x98\x01\n" +
	"\x11SSEInterruptEvent\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12!\n" +
	"\fcontent_type\x18\x03 \x01(\tR\vcontentType\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\"U\n" +
	"\vSSEEndEvent\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\tR\x0econversationId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId2\xca\x03\n" +
	"\tLlmCenter\x12Z\n" +
	"\x0fChatCompletions\x12!.llmcenter.ChatCompletionsRequest\x1a\".llmcenter.ChatCompletionsResponse0\x01\x12K\n" +
	"\n" +
	"ChatResume\x12\x1c.llmcenter.ChatResumeRequest\x1a\x1d.llmcenter.ChatResumeResponse0\x01\x12K\n" +
	"\n" +
	"FileUpload\x12\x1c.llmcenter.FileUploadRequest\x1a\x1d.llmcenter.FileUploadResponse(\x01\x12[\n" +
	"\x10GetConversations\x12\".llmcenter.GetConversationsRequest\x1a#.llmcenter.GetConversationsResponse\x12j\n" +
	"\x15GetConversationDetail\x12'.llmcenter.GetConversationDetailRequest\x1a(.llmcenter.GetConversationDetailResponseB\x06Z\x04./pbb\x06proto3"

var (
	file_llmcenter_proto_rawDescOnce sync.Once
	file_llmcenter_proto_rawDescData []byte
)

func file_llmcenter_proto_rawDescGZIP() []byte {
	file_llmcenter_proto_rawDescOnce.Do(func() {
		file_llmcenter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_llmcenter_proto_rawDesc), len(file_llmcenter_proto_rawDesc)))
	})
	return file_llmcenter_proto_rawDescData
}

var file_llmcenter_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_llmcenter_proto_goTypes = []any{
	(*ChatCompletionsRequest)(nil),        // 0: llmcenter.ChatCompletionsRequest
	(*ChatCompletionsResponse)(nil),       // 1: llmcenter.ChatCompletionsResponse
	(*ChatResumeRequest)(nil),             // 2: llmcenter.ChatResumeRequest
	(*ChatResumeResponse)(nil),            // 3: llmcenter.ChatResumeResponse
	(*GetConversationsRequest)(nil),       // 4: llmcenter.GetConversationsRequest
	(*GetConversationsResponse)(nil),      // 5: llmcenter.GetConversationsResponse
	(*GetConversationDetailRequest)(nil),  // 6: llmcenter.GetConversationDetailRequest
	(*GetConversationDetailResponse)(nil), // 7: llmcenter.GetConversationDetailResponse
	(*FileUploadRequest)(nil),             // 8: llmcenter.FileUploadRequest
	(*FileInfo)(nil),                      // 9: llmcenter.FileInfo
	(*FileUploadResponse)(nil),            // 10: llmcenter.FileUploadResponse
	(*Reference)(nil),                     // 11: llmcenter.Reference
	(*Conversation)(nil),                  // 12: llmcenter.Conversation
	(*Message)(nil),                       // 13: llmcenter.Message
	(*SSEMessageEvent)(nil),               // 14: llmcenter.SSEMessageEvent
	(*SSEInterruptEvent)(nil),             // 15: llmcenter.SSEInterruptEvent
	(*SSEEndEvent)(nil),                   // 16: llmcenter.SSEEndEvent
}
var file_llmcenter_proto_depIdxs = []int32{
	11, // 0: llmcenter.ChatCompletionsRequest.references:type_name -> llmcenter.Reference
	14, // 1: llmcenter.ChatCompletionsResponse.message:type_name -> llmcenter.SSEMessageEvent
	15, // 2: llmcenter.ChatCompletionsResponse.interrupt:type_name -> llmcenter.SSEInterruptEvent
	16, // 3: llmcenter.ChatCompletionsResponse.end:type_name -> llmcenter.SSEEndEvent
	14, // 4: llmcenter.ChatResumeResponse.message:type_name -> llmcenter.SSEMessageEvent
	16, // 5: llmcenter.ChatResumeResponse.end:type_name -> llmcenter.SSEEndEvent
	12, // 6: llmcenter.GetConversationsResponse.data:type_name -> llmcenter.Conversation
	13, // 7: llmcenter.GetConversationDetailResponse.history:type_name -> llmcenter.Message
	9,  // 8: llmcenter.FileUploadRequest.info:type_name -> llmcenter.FileInfo
	0,  // 9: llmcenter.LlmCenter.ChatCompletions:input_type -> llmcenter.ChatCompletionsRequest
	2,  // 10: llmcenter.LlmCenter.ChatResume:input_type -> llmcenter.ChatResumeRequest
	8,  // 11: llmcenter.LlmCenter.FileUpload:input_type -> llmcenter.FileUploadRequest
	4,  // 12: llmcenter.LlmCenter.GetConversations:input_type -> llmcenter.GetConversationsRequest
	6,  // 13: llmcenter.LlmCenter.GetConversationDetail:input_type -> llmcenter.GetConversationDetailRequest
	1,  // 14: llmcenter.LlmCenter.ChatCompletions:output_type -> llmcenter.ChatCompletionsResponse
	3,  // 15: llmcenter.LlmCenter.ChatResume:output_type -> llmcenter.ChatResumeResponse
	10, // 16: llmcenter.LlmCenter.FileUpload:output_type -> llmcenter.FileUploadResponse
	5,  // 17: llmcenter.LlmCenter.GetConversations:output_type -> llmcenter.GetConversationsResponse
	7,  // 18: llmcenter.LlmCenter.GetConversationDetail:output_type -> llmcenter.GetConversationDetailResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_llmcenter_proto_init() }
func file_llmcenter_proto_init() {
	if File_llmcenter_proto != nil {
		return
	}
	file_llmcenter_proto_msgTypes[1].OneofWrappers = []any{
		(*ChatCompletionsResponse_Message)(nil),
		(*ChatCompletionsResponse_Interrupt)(nil),
		(*ChatCompletionsResponse_End)(nil),
	}
	file_llmcenter_proto_msgTypes[3].OneofWrappers = []any{
		(*ChatResumeResponse_Message)(nil),
		(*ChatResumeResponse_End)(nil),
	}
	file_llmcenter_proto_msgTypes[8].OneofWrappers = []any{
		(*FileUploadRequest_Info)(nil),
		(*FileUploadRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_llmcenter_proto_rawDesc), len(file_llmcenter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_llmcenter_proto_goTypes,
		DependencyIndexes: file_llmcenter_proto_depIdxs,
		MessageInfos:      file_llmcenter_proto_msgTypes,
	}.Build()
	File_llmcenter_proto = out.File
	file_llmcenter_proto_goTypes = nil
	file_llmcenter_proto_depIdxs = nil
}
