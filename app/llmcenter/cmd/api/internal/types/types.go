// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4

package types

type ChatCompletionsRequest struct {
	ConversationID   string      `json:"conversation_id,optional"`    // 可选, 现有会话ID。如果为空，后端将创建新会话
	Prompt           string      `json:"prompt"`                      // 必选, 用户输入的文本内容
	UseKnowledgeBase bool        `json:"use_knowledge_base,optional"` // 可选, 是否使用自定义知识库
	KnowledgeBaseID  string      `json:"knowledge_base_id,optional"`  // 可选, 如果 use_knowledge_base 为 true, 则需要提供知识库ID
	References       []Reference `json:"references,optional"`         // 可选, 引用列表
}

type ChatCompletionsResponse struct {
}

type ChatResumeRequest struct {
	ConversationID string `json:"conversation_id"`      // 必选, 当前会话的ID
	Content        string `json:"content"`              // 必选, 用户在前端编辑器中确认后的完整内容
	TemplateID     string `json:"template_id,optional"` // 可选, 如果用户在这一步选择了模板
}

type ChatResumeResponse struct {
}

type Conversation struct {
	ConversationID string `json:"conversation_id"` // 会话ID
	Title          string `json:"title"`           // 会话标题
	UpdatedAt      string `json:"updated_at"`      // 更新时间 (RFC3339)
}

type FileUploadRequest struct {
}

type FileUploadResponse struct {
	FileID   string `json:"file_id"`      // 后端生成的唯一文件ID
	FileName string `json:"file_name"`    // 原始文件名
	URL      string `json:"url,optional"` // 文件的可访问URL
	Message  string `json:"message"`      // 成功消息
}

type GetConversationDetailRequest struct {
	ConversationID string `path:"conversation_id"` // 从 URL 路径中获取会话ID
}

type GetConversationDetailResponse struct {
	ConversationID string    `json:"conversation_id"`
	Title          string    `json:"title"`
	History        []Message `json:"history"` // 详细消息历史
}

type GetConversationsRequest struct {
}

type GetConversationsResponse struct {
	Data []Conversation `json:"data"` // 会话列表
}

type Message struct {
	ID          string `json:"id"`           // 消息ID
	Role        string `json:"role"`         // 角色: "user" 或 "assistant"
	Content     string `json:"content"`      // 消息内容
	ContentType string `json:"content_type"` // 内容类型, 例如: "text", "document_outline", "final_document"
	CreatedAt   string `json:"created_at"`   // 创建时间 (RFC3339)
}

type Reference struct {
	Type   string `json:"type"`    // 引用类型, 例如: "file"
	FileID string `json:"file_id"` // 文件ID
}

type SSEEndEvent struct {
	ConversationID string `json:"conversation_id"` // 本次交互所属的会话ID
	MessageID      string `json:"message_id"`      // 本次交互最终生成的完整消息ID
}

type SSEInterruptEvent struct {
	ConversationID string `json:"conversation_id"`
	MessageID      string `json:"message_id"`
	ContentType    string `json:"content_type"` // 内容类型, 例如 "document_outline"
	Content        string `json:"content"`      // 需要填入编辑器的内容清单
}

type SSEMessageEvent struct {
	Chunk string `json:"chunk"` // 流式返回的文本片段
}
