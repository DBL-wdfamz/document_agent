// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	conversationsFieldNames          = builder.RawFieldNames(&Conversations{})
	conversationsRows                = strings.Join(conversationsFieldNames, ",")
	conversationsRowsExpectAutoSet   = strings.Join(stringx.Remove(conversationsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	conversationsRowsWithPlaceHolder = strings.Join(stringx.Remove(conversationsFieldNames, "`conversation_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	conversationsModel interface {
		Insert(ctx context.Context, data *Conversations) (sql.Result, error)
		FindOne(ctx context.Context, conversationId string) (*Conversations, error)
		Update(ctx context.Context, data *Conversations) error
		Delete(ctx context.Context, conversationId string) error
	}

	defaultConversationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Conversations struct {
		ConversationId string         `db:"conversation_id"` // 会话ID (主键, ULID)
		UserId         int64          `db:"user_id"`         // 关联的用户ID
		Title          string         `db:"title"`           // 会话标题
		Metadata       sql.NullString `db:"metadata"`        // 存储额外的数据，例如模型设置等
		CreatedAt      time.Time      `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time      `db:"updated_at"`      // 最后更新时间
	}
)

func newConversationsModel(conn sqlx.SqlConn) *defaultConversationsModel {
	return &defaultConversationsModel{
		conn:  conn,
		table: "`conversations`",
	}
}

func (m *defaultConversationsModel) Delete(ctx context.Context, conversationId string) error {
	query := fmt.Sprintf("delete from %s where `conversation_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, conversationId)
	return err
}

func (m *defaultConversationsModel) FindOne(ctx context.Context, conversationId string) (*Conversations, error) {
	query := fmt.Sprintf("select %s from %s where `conversation_id` = ? limit 1", conversationsRows, m.table)
	var resp Conversations
	err := m.conn.QueryRowCtx(ctx, &resp, query, conversationId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultConversationsModel) Insert(ctx context.Context, data *Conversations) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, conversationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ConversationId, data.UserId, data.Title, data.Metadata)
	return ret, err
}

func (m *defaultConversationsModel) Update(ctx context.Context, data *Conversations) error {
	query := fmt.Sprintf("update %s set %s where `conversation_id` = ?", m.table, conversationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Title, data.Metadata, data.ConversationId)
	return err
}

func (m *defaultConversationsModel) tableName() string {
	return m.table
}
