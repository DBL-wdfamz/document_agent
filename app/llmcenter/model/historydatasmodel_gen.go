// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	historydatasFieldNames          = builder.RawFieldNames(&Historydatas{})
	historydatasRows                = strings.Join(historydatasFieldNames, ",")
	historydatasRowsExpectAutoSet   = strings.Join(stringx.Remove(historydatasFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	historydatasRowsWithPlaceHolder = strings.Join(stringx.Remove(historydatasFieldNames, "`message_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	historydatasModel interface {
		Insert(ctx context.Context, data *Historydatas) (sql.Result, error)
		FindOne(ctx context.Context, messageId string) (*Historydatas, error)
		Update(ctx context.Context, data *Historydatas) error
		Delete(ctx context.Context, messageId string) error
	}

	defaultHistorydatasModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Historydatas struct {
		MessageId      string         `db:"message_id"`      // 消息ID (主键, ULID)
		ConversationId string         `db:"conversation_id"` // 关联的会话ID (外键)
		Documenttype   string         `db:"documenttype"`    // 文章类型
		Information    string         `db:"information"`     // 基本信息
		Requests       string         `db:"requests"`        // 特殊要求
		Metadata       sql.NullString `db:"metadata"`        // 存储额外的数据，例如引用的文档ID等
		CreatedAt      time.Time      `db:"created_at"`      // 消息创建时间
	}
)

func newHistorydatasModel(conn sqlx.SqlConn) *defaultHistorydatasModel {
	return &defaultHistorydatasModel{
		conn:  conn,
		table: "`historydatas`",
	}
}

func (m *defaultHistorydatasModel) Delete(ctx context.Context, messageId string) error {
	query := fmt.Sprintf("delete from %s where `message_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, messageId)
	return err
}

func (m *defaultHistorydatasModel) FindOne(ctx context.Context, messageId string) (*Historydatas, error) {
	query := fmt.Sprintf("select %s from %s where `message_id` = ? limit 1", historydatasRows, m.table)
	var resp Historydatas
	err := m.conn.QueryRowCtx(ctx, &resp, query, messageId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHistorydatasModel) Insert(ctx context.Context, data *Historydatas) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, historydatasRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MessageId, data.ConversationId, data.Documenttype, data.Information, data.Requests, data.Metadata)
	return ret, err
}

func (m *defaultHistorydatasModel) Update(ctx context.Context, data *Historydatas) error {
	query := fmt.Sprintf("update %s set %s where `message_id` = ?", m.table, historydatasRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ConversationId, data.Documenttype, data.Information, data.Requests, data.Metadata, data.MessageId)
	return err
}

func (m *defaultHistorydatasModel) tableName() string {
	return m.table
}
