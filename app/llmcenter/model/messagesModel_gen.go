// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messagesFieldNames          = builder.RawFieldNames(&Messages{})
	messagesRows                = strings.Join(messagesFieldNames, ",")
	messagesRowsExpectAutoSet   = strings.Join(stringx.Remove(messagesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messagesRowsWithPlaceHolder = strings.Join(stringx.Remove(messagesFieldNames, "`message_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	messagesModel interface {
		Insert(ctx context.Context, data *Messages) (sql.Result, error)
		FindOne(ctx context.Context, messageId string) (*Messages, error)
		Update(ctx context.Context, data *Messages) error
		Delete(ctx context.Context, messageId string) error
	}

	defaultMessagesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Messages struct {
		MessageId      string         `db:"message_id"`      // 消息ID (主键, ULID)
		ConversationId string         `db:"conversation_id"` // 关联的会话ID (外键)
		Role           string         `db:"role"`            // 角色: "user" 或 "assistant"
		Content        string         `db:"content"`         // 消息的具体内容
		ContentType    string         `db:"content_type"`    // 内容类型: "text", "document_outline" 等
		Metadata       sql.NullString `db:"metadata"`        // 存储额外的数据，例如引用的文档ID等
		CreatedAt      time.Time      `db:"created_at"`      // 消息创建时间
	}
)

func newMessagesModel(conn sqlx.SqlConn) *defaultMessagesModel {
	return &defaultMessagesModel{
		conn:  conn,
		table: "`messages`",
	}
}

func (m *defaultMessagesModel) Delete(ctx context.Context, messageId string) error {
	query := fmt.Sprintf("delete from %s where `message_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, messageId)
	return err
}

func (m *defaultMessagesModel) FindOne(ctx context.Context, messageId string) (*Messages, error) {
	query := fmt.Sprintf("select %s from %s where `message_id` = ? limit 1", messagesRows, m.table)
	var resp Messages
	err := m.conn.QueryRowCtx(ctx, &resp, query, messageId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessagesModel) Insert(ctx context.Context, data *Messages) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, messagesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MessageId, data.ConversationId, data.Role, data.Content, data.ContentType, data.Metadata)
	return ret, err
}

func (m *defaultMessagesModel) Update(ctx context.Context, data *Messages) error {
	query := fmt.Sprintf("update %s set %s where `message_id` = ?", m.table, messagesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ConversationId, data.Role, data.Content, data.ContentType, data.Metadata, data.MessageId)
	return err
}

func (m *defaultMessagesModel) tableName() string {
	return m.table
}
