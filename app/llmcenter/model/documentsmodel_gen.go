// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	documentsFieldNames          = builder.RawFieldNames(&Documents{})
	documentsRows                = strings.Join(documentsFieldNames, ",")
	documentsRowsExpectAutoSet   = strings.Join(stringx.Remove(documentsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	documentsRowsWithPlaceHolder = strings.Join(stringx.Remove(documentsFieldNames, "`message_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	documentsModel interface {
		Insert(ctx context.Context, data *Documents) (sql.Result, error)
		FindOne(ctx context.Context, messageId string) (*Documents, error)
		Update(ctx context.Context, data *Documents) error
		Delete(ctx context.Context, messageId string) error
	}

	defaultDocumentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Documents struct {
		MessageId      string    `db:"message_id"`      // 消息ID (主键, ULID)
		ConversationId string    `db:"conversation_id"` // 关联的会话ID (外键)
		Content        string    `db:"content"`         // 文章
		CreatedAt      time.Time `db:"created_at"`      // 消息创建时间
	}
)

func newDocumentsModel(conn sqlx.SqlConn) *defaultDocumentsModel {
	return &defaultDocumentsModel{
		conn:  conn,
		table: "`documents`",
	}
}

func (m *defaultDocumentsModel) Delete(ctx context.Context, messageId string) error {
	query := fmt.Sprintf("delete from %s where `message_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, messageId)
	return err
}

func (m *defaultDocumentsModel) FindOne(ctx context.Context, messageId string) (*Documents, error) {
	query := fmt.Sprintf("select %s from %s where `message_id` = ? limit 1", documentsRows, m.table)
	var resp Documents
	err := m.conn.QueryRowCtx(ctx, &resp, query, messageId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDocumentsModel) Insert(ctx context.Context, data *Documents) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, documentsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MessageId, data.ConversationId, data.Content)
	return ret, err
}

func (m *defaultDocumentsModel) Update(ctx context.Context, data *Documents) error {
	query := fmt.Sprintf("update %s set %s where `message_id` = ?", m.table, documentsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ConversationId, data.Content, data.MessageId)
	return err
}

func (m *defaultDocumentsModel) tableName() string {
	return m.table
}
