// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filesFieldNames          = builder.RawFieldNames(&Files{})
	filesRows                = strings.Join(filesFieldNames, ",")
	filesRowsExpectAutoSet   = strings.Join(stringx.Remove(filesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	filesRowsWithPlaceHolder = strings.Join(stringx.Remove(filesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	filesModel interface {
		Insert(ctx context.Context, data *Files) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Files, error)
		Update(ctx context.Context, data *Files) error
		Delete(ctx context.Context, id string) error
	}

	defaultFilesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Files struct {
		Id         string    `db:"id"`          // 主键
		Filename   string    `db:"filename"`    // 用户上传的原始文件名
		StoredName string    `db:"stored_name"` // 服务器保存的唯一文件名
		CreatedAt  time.Time `db:"created_at"`  // 上传时间
	}
)

func newFilesModel(conn sqlx.SqlConn) *defaultFilesModel {
	return &defaultFilesModel{
		conn:  conn,
		table: "`files`",
	}
}

func (m *defaultFilesModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFilesModel) FindOne(ctx context.Context, id string) (*Files, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filesRows, m.table)
	var resp Files
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilesModel) Insert(ctx context.Context, data *Files) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, filesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Filename, data.StoredName)
	return ret, err
}

func (m *defaultFilesModel) Update(ctx context.Context, data *Files) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, filesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Filename, data.StoredName, data.Id)
	return err
}

func (m *defaultFilesModel) tableName() string {
	return m.table
}
